name: Deploy using Docker via SSH

on:
  workflow_call:
    secrets:
      SSH_HOST:
        required: true
      SSH_USER:
        required: true
      SSH_KEY:
        required: true
      CONTAINER_TAG:
        required: true
      DOPPLER_TOKEN:
        required: true
      DOCKER_NETWORK:
        required: true
      GHCR_USER:
        required: false
      GHCR_TOKEN:
        required: false

env:
  CONTAINER_NAME: ${{ github.event.repository.name }}-${{ secrets.CONTAINER_TAG }}
  REPOSITORY_NAME_LOWERCASE: ${{ github.repository  }} # will be set later
  PACKAGE_URL: null # will be set later

jobs:
  prepare_environment:
    name:
    runs-on: ubuntu-latest

    steps:
      - name: Set lowercase repository name
        run: |
          echo "REPOSITORY_NAME_LOWERCASE=$(echo ${{ env.REPOSITORY_NAME_LOWERCASE }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Use lowercase repository name
        run: |
          echo "PACKAGE_URL: ghcr.io/${{ env.REPOSITORY_NAME_LOWERCASE }}:${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Display lowercase repository name
        run: |
          echo ${{ env.REPOSITORY_NAME_LOWERCASE }}

      - name: Print Package URL
        run: echo $PACKAGE_URL
  ssh:
    name: SSH and deploy
    runs-on: ubuntu-latest
    steps:
      - name: Login to GHCR.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER || github.actor }}
          password: ${{ secrets.GHCR_TOKEN || github.token }}

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          known_hosts: 'placeholder'
          config: |
            Host ${{ secrets.SSH_HOST }}
            HostName ${{ secrets.SSH_HOST }}
            User ${{ secrets.SSH_USER }}
            StrictHostKeyChecking no
      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Run commands in remote host
        run: |
          ssh -T ${{ secrets.SSH_HOST }} "docker stop ${{ env.CONTAINER_NAME }} || true \\
          && docker rm ${{ env.CONTAINER_NAME }} || true \\
          && docker image prune -a -f \\
          && docker run -d --restart=unless-stopped --net ${{ secrets.DOCKER_NETWORK }} --env DOPPLER_TOKEN=${{ secrets.DOPPLER_TOKEN }} --name ${{ env.CONTAINER_NAME }} ${{ env.PACKAGE_URL }}"
